name: Test Coverage

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  coverage:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test]

      - name: Run tests with coverage
        run: |
          pytest -v --cov=src/words2nums --cov-report=xml --cov-report=html --cov-fail-under=80

      - name: Upload coverage to smokeshow
        env:
          SMOKESHOW_AUTH_KEY: ${{ secrets.SMOKESHOW_AUTH_KEY }}
        id: smokeshow
        run: |
          pip install smokeshow
          COVERAGE_URL=$(smokeshow upload htmlcov 2>&1 | tail -n1)
          echo "COVERAGE_URL=$COVERAGE_URL" >> "$GITHUB_OUTPUT"
          
          # Extract coverage percentage from the HTML report
          COVERAGE=$(grep -o '<span class="pc_cov">.*%</span>' htmlcov/index.html | grep -o '[0-9]\+' | head -1)
          echo "COVERAGE=$COVERAGE" >> "$GITHUB_OUTPUT"

      - name: Comment PR with coverage info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const indexHtml = fs.readFileSync('htmlcov/index.html', 'utf8');

            const totalMatch = indexHtml.match(/<span class="pc_cov">([\d.]+)%<\/span>/);
            const totalCoverage = totalMatch ? totalMatch[1] : 'N/A';

            const fileRegex = /<tr class="region">.*?<td class="name left"><a href="[^"]+">([^<]+)<\/a><\/td>.*?<td>(\d+)<\/td>.*?<td>(\d+)<\/td>.*?<td>(\d+)<\/td>.*?<td class="right"[^>]*>([\d.]+)%<\/td>.*?<\/tr>/gs;
            let filesCoverage = [];
            let match;

            while ((match = fileRegex.exec(indexHtml)) !== null) {
              const [_, file, statements, missing, excluded, coverage] = match;
              if (!file.includes('__init__')) {
                const shortFile = file.replace('src/words2nums/', '');
                filesCoverage.push(`| ${shortFile} | ${statements} | ${missing} | ${coverage}% |`);
              }
            }

            const body = `## Coverage Report
            Total coverage: ${totalCoverage}%

            ### Coverage by file
            | File | Statements | Missing | Coverage |
            |------|------------|---------|----------|
            ${filesCoverage.join('\n')}

            [Full coverage report available on smokeshow](${{ steps.smokeshow.outputs.COVERAGE_URL }})
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Update README badge
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          
          git fetch origin ${BRANCH_NAME}
          git checkout ${BRANCH_NAME}
          git pull origin ${BRANCH_NAME}
          
          COVERAGE="${{ steps.smokeshow.outputs.COVERAGE }}"
          COVERAGE_URL="${{ steps.smokeshow.outputs.COVERAGE_URL }}"
          
          sed "s|coverage-[0-9]\+%25-brightgreen|coverage-${COVERAGE}%25-brightgreen|g" README.md > README.tmp
          sed "s|smokeshow\.helpmanual\.io/[^)]*|smokeshow.helpmanual.io/${COVERAGE_URL#*helpmanual.io/}|g" README.tmp > README.md
          rm README.tmp
          
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add README.md
          git commit -m "Update coverage badge" || echo "No changes to commit"
          git push origin ${BRANCH_NAME} || echo "No changes to push"
